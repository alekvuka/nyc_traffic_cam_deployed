{"version":3,"sources":["avenueOptions.js","ResetButton.js","RequestButton.js","HeaderContainer.js","actions/cameraActions.js","actions/requestActions.js","actions/avenueActions.js","Description.js","CloseButton.js","Image.js","Camera.js","Favorite.js","displayAlert.js","CamerasContainer.js","AvenueRequestForm.js","RequestContainer.js","HomePage.js","App.js","serviceWorker.js","index.js","ManageCameras.js"],"names":["AvenueOptions","props","avenues","map","avenue","index","Button","key","onClick","fetchCameras","id","name","to","ButtonGroup","ResetButton","variant","reset","RequestButton","displayInputForm","HeaderContainer","ButtonToolbar","this","handleOptionClick","handleOnClick","changeDisplayInputForm","console","log","fetchAvenues","Component","connect","state","requestCreated","dispatch","type","fetch","then","response","json","data","cameras","action","Description","text","CloseButton","className","bg","closeCam","camera","Image","updateImage","setState","url","Math","random","timerID","setInterval","clearInterval","src","alt","desc","height","width","Camera","Jumbotron","description","DisplayAlert","actionsAfterTimeout","redirect","Alert","CamerasContainer","closeButtonClicked","removeCam","cameraDeleted","resetCameraDeleted","checkDeletionAlert","txt","renderCameras","Container","fluid","AvenueRequestForm","handleOnChange","event","target","email","value","request","preventDefault","postRequest","Card","style","InputGroup","Prepend","Text","FormControl","onChange","placeholder","aria-label","aria-describedby","handleOnSubmit","Request","setRedirect","checkRedirect","requestAlertSeen","checkAlert","req","method","headers","body","JSON","stringify","catch","error","bol","HomePage","Header","Body","Title","Spinner","animation","Footer","App","path","component","RequestContainer","exact","Boolean","window","location","hostname","match","store","createStore","cams","filter","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ba5f8f99.chunk.js","sourcesContent":["import React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\nimport { NavLink } from 'react-router-dom';\n\nconst AvenueOptions = props => {\n\n  const avenues = props.avenues.map((avenue, index) => {\n    return <Button key={index} onClick={() => props.fetchCameras(avenue.id)}>{avenue.name}</Button>;\n  });\n\n  return (\n   <div>\n   <NavLink to='/cameras'>\n    <ButtonGroup>\n      {avenues}\n    </ButtonGroup>\n    </NavLink>\n   </div>\n );\n}\n\nexport default AvenueOptions\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport { NavLink } from 'react-router-dom';\n\nconst ResetButton = props => {\n  return (\n      <NavLink to=\"/\"><Button variant=\"danger\" onClick={props.reset}>reset</Button></NavLink>\n  );\n};\n\nexport default ResetButton;\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport { NavLink } from 'react-router-dom';\n\nconst RequestButton = props => {\n\n  return (\n    <NavLink to=\"/request\"><Button variant=\"warning\" onClick={props.displayInputForm}>request new avenues</Button></NavLink>\n  );\n};\n\nexport default RequestButton;\n","import React, { Component } from 'react'\nimport AvenueOptions from './avenueOptions.js';\nimport ResetButton from './ResetButton.js';\nimport { connect } from 'react-redux'\nimport { fetchAvenues } from './actions/avenueActions'\nimport { fetchCameras } from './actions/cameraActions'\nimport {reset} from './actions/requestActions.js'\nimport ButtonToolbar from 'react-bootstrap/ButtonToolbar';\nimport RequestButton from './RequestButton.js'\n\nclass HeaderContainer extends Component {\n\n  render() {\n    return (\n      <div>\n        <ButtonToolbar>\n          <AvenueOptions avenues={this.props.avenues} fetchCameras={this.props.fetchCameras} handleOptionClick={this.handleOptionClick}/>\n          <ResetButton reset={this.handleOnClick} />\n          <RequestButton displayInputForm={this.changeDisplayInputForm}/>\n        </ButtonToolbar>\n      </div>\n    )\n  }\n\n  componentDidMount(){\n    console.log(\"a\")\n     this.props.fetchAvenues()\n     console.log(\"b\")\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    avenues: state.avenues,\n    requestCreated: state.requestCreated\n  }\n}\n\nconst mapDispatchToProps = dispatch => ({\n  fetchCameras: (avenue) => dispatch(fetchCameras(avenue)),\n  //reset: () => dispatch({ type: \"RESET\"}),\n  reset: () => dispatch(reset()),\n  fetchAvenues: () => dispatch(fetchAvenues()),\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(HeaderContainer)\n","export const fetchCameras = (avenue) => {\n  return (dispatch) => {\n    dispatch({ type: 'LOADING_CAMERAS'})\n    fetch(`/cameras/${avenue}`).then(response => {\n      return response.json()\n    }).then(data => {\n      dispatch({ type: 'ADD_CAMERAS', cameras: data })\n    })\n  }\n}\n","export const postRequest = (req) => {\n   return (dispatch) => {\n     dispatch({ type: 'SENDING_REQUEST'})\n     fetch(`/request`, {\n       method: 'POST',\n       headers: {\n          \"Content-Type\": \"application/json\"\n        },\n       body: JSON.stringify(req)\n     }).then(response => {\n       return response.json()\n     }).then(data => {\n       dispatch({ type: 'REQUEST_SENT', data })\n     }).catch((error) => {\n         console.error('Error:', error);\n       });\n   }\n }\n\nexport const reset = () => {\n   return {action: \"RESET\"}\n }\n","export const fetchAvenues = () => {\n  return (dispatch) => {\n    dispatch({ type: 'LOADING_AVENUES'})\n    fetch('/avenues').then(response => {\n      return response.json()\n    }).then(data => {\n      dispatch({ type: 'ADD_AVENUES', avenues: data })\n    })\n  }\n}\n","import React from 'react';\n\nconst Description = props => {\n  return (\n    <div>\n      <h2>{props.text}</h2>\n    </div>\n  );\n};\n\n\nexport default Description;\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\n\nconst CloseButton = props => {\n\n  return (\n    <div>\n      <Button className=\"fixed-right\" bg=\"primary\" onClick={() => props.closeCam(props.camera)}>X</Button>\n    </div>\n  );\n};\n\nexport default CloseButton;\n","import React, { Component } from 'react'\n\nclass Image extends Component {\n\n  constructor(props){\n    super(props)\n    this.state = {\n      url: props.url + Math.random()\n    }\n    \n  }\n\n  updateImage = () => {\n        this.setState({\n          url: this.props.url + Math.random()\n        })\n    }\n\n  componentDidMount() {\n    this.timerID = setInterval(\n      () => this.updateImage(),\n      1000\n    );\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timerID);\n  }\n\n\n  render() {\n    return (\n      <div>\n        <img src={this.state.url} alt={this.props.desc} height='320' width='400' />\n      </div>\n    )\n  }\n\n}\n\nexport default Image\n","import React, { Component } from 'react'\nimport Description from './Description.js'\nimport CloseButton from './CloseButton.js'\nimport Image from './Image.js'\nimport Jumbotron from 'react-bootstrap/Jumbotron'\nimport Favorite from './Favorite.js'\nclass Camera extends Component {\n\n  render() {\n    return (\n      <Jumbotron>\n           <Description text={this.props.description} />\n           <CloseButton text={this.props.description} variant={this.props.variant} closeCam={this.props.closeCam} camera={this.props}  />\n           <Image url={this.props.url} desc={this.props.description} />\n     </Jumbotron>\n    )\n  }\n}\n\n//<Favorite />\nexport default Camera\n","import React, { Component } from 'react'\nimport Description from './Description.js'\nimport CloseButton from './CloseButton.js'\nimport Image from './Image.js'\nimport Jumbotron from 'react-bootstrap/Jumbotron'\n\n\n\nclass Favorite extends Component {\n\n  state = {\n    clicked: false\n  }\n\n  clicked = () => {\n    this.setState((state) => {\n      return {clicked: !state.clicked }\n    })\n  }\n\n  render() {\n    return (\n      <button onClick={this.clicked}>{this.state.clicked ? \"Favorite\" : \"Not Favorite\"}</button>\n    )\n  }\n}\n\nexport default Favorite\n","import Alert from 'react-bootstrap/Alert'\nimport React, { Component } from 'react'\n\nclass DisplayAlert extends Component {\n\n  actionsAfterTimeout = () => {\n    this.props.redirect()\n  }\n\n  \n\n  render(){\n    return(\n      <div>\n        <Alert variant={this.props.variant}> {this.props.text}</Alert>\n      </div>\n    )}\n\n  componentDidMount(){\n    this.timerID = setInterval(\n       this.actionsAfterTimeout,\n       2000\n     );\n  }\n\n  componentWillUnmount(){\n    clearInterval(this.timerID)\n  }\n};\n\nexport default DisplayAlert;\n","import React, { Component } from 'react'\nimport Camera from './Camera.js';\nimport { connect } from 'react-redux'\nimport Container from 'react-bootstrap/Container'\nimport DisplayAlert from './displayAlert.js'\n\n\n\nclass CamerasContainer extends Component {\n\n  constructor(props) {\n\n    super(props)\n    this.state = {\n      cameraDeleted: \"\"\n    }\n  }\n\n  closeButtonClicked = (camera) => {\n    this.props.removeCam(camera.url)\n    this.setState({\n      cameraDeleted: camera.description\n    })\n  }\n\n  resetCameraDeleted = () => {\n    this.setState({\n      cameraDeleted: \"\"\n    })\n  }\n\n  checkDeletionAlert = () => {\n    if(this.state.cameraDeleted){\n      const txt = `Removed camera ${this.state.cameraDeleted}!`\n      return  (<DisplayAlert variant=\"primary\" text={txt} redirect={this.resetCameraDeleted}/> )\n    }\n  }\n\n  renderCameras = () => {\n    const cams = this.props.cameras.map((camera, index) => {\n       return <Camera key={index} variant=\"primary\" description={camera.description} url={camera.url} closeCam={this.closeButtonClicked}  />\n    })\n    return cams\n  }\n\n  render() {\n    return (\n      <Container fluid>\n        {this.checkDeletionAlert()}\n        {this.renderCameras()}\n      </Container>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    cameras: state.cameras\n  }\n}\n\nconst mapDispatchToProps = dispatch => ({\n  removeCam: (url) => dispatch({ type: \"REMOVE_CAMERA\", url})\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CamerasContainer)\n","import React, { Component } from 'react'\nimport Button from 'react-bootstrap/Button';\nimport Card from 'react-bootstrap/Card'\nimport Container from 'react-bootstrap/Container'\nimport InputGroup from 'react-bootstrap/InputGroup'\nimport FormControl from 'react-bootstrap/FormControl'\n\nclass AvenueRequestForm extends Component {\n\n  constructor(props){\n    super(props)\n    this.state ={\n      request: \"\",\n      email: \"\"\n    }\n  }\n\n  handleOnChange = (event) => {\n    if(event.target.id === \"email\"){\n      this.setState({\n        ...this.state,\n        email: event.target.value\n      })\n    }else{\n      this.setState({\n        ...this.state,\n        request: event.target.value\n      })\n    }\n  }\n\n  handleOnSubmit(event) {\n    event.preventDefault();\n    this.props.postRequest(this.state);\n    this.setState({\n      request: '',\n      email: '',\n    });\n  }\n\n  render() {\n    return (\n      <Container fluid>\n          <Card bg=\"light\" text=\"white\" style={{ width: '36em' }}>\n\n            <InputGroup className=\"mb-3\">\n              <InputGroup.Prepend>\n              <InputGroup.Text id=\"basic-addon1\">email -> </InputGroup.Text>\n              </InputGroup.Prepend>\n              <FormControl id=\"email\" onChange={this.handleOnChange} placeholder=\"\" aria-label=\"Username\" aria-describedby=\"basic-addon1\"/>\n            </InputGroup>\n\n            <InputGroup className=\"mb-3\">\n              <InputGroup.Prepend>\n              <InputGroup.Text id=\"basic-addon1\">Ave. Request -> </InputGroup.Text>\n              </InputGroup.Prepend>\n              <FormControl id=\"request\" onChange={this.handleOnChange} placeholder=\"\" aria-label=\"Username\" aria-describedby=\"basic-addon1\"/>\n            </InputGroup>\n\n            <Button variant=\"warning\" type=\"submit\" onClick={(event) => this.handleOnSubmit(event)}>Send Request</Button>\n\n          </Card>\n      </Container>\n  )}\n}\n\nexport default AvenueRequestForm\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux'\nimport { postRequest } from './actions/requestActions'\nimport AvenueRequestForm from './AvenueRequestForm.js'\nimport DisplayAlert from './displayAlert.js'\nimport { Redirect } from \"react-router\";\n\nclass Request extends Component {\n\n  constructor(props){\n    super(props)\n    this.state = {\n      redirect: false\n    }\n  }\n\n  setRedirect = () => {\n    this.setState({\n      redirect: true\n    })\n  }\n\n  checkRedirect = () => {\n    if(this.state.redirect){\n      this.props.requestAlertSeen(true)\n      return <Redirect to=\"/\" />\n    }\n  }\n\n  checkAlert = () => {\n    if(this.props.requestCreated){\n      const txt = `Your request for ${this.props.requestCreated.text} was sucsefully submitted!`\n      return  (<div><DisplayAlert text={txt} variant=\"warning\" redirect={this.setRedirect}/> </div> )\n    }\n  }\n\n  render() {\n        return (\n          <div>\n          {this.checkAlert()}\n          <AvenueRequestForm postRequest={this.props.postRequest}/>\n          {this.checkRedirect()}\n          </div>\n       )}\n};\n\nconst mapStateToProps = state => ({\n  requestCreated: state.requestCreated\n})\n\nconst mapDispatchToProps = dispatch => ({\n  postRequest: (request) => dispatch(postRequest(request)),\n  requestAlertSeen: (bol) => dispatch ({type: \"REQUEST_ALERT_SEEN\", action: bol}),\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Request)\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport Container from 'react-bootstrap/Container'\nimport Spinner from 'react-bootstrap/Spinner'\nimport Card from 'react-bootstrap/Card'\n\nclass HomePage extends Component {\n  render() {\n    return (\n      <Container fluid>\n          <Card className=\"text-center\" bg=\"dark\" text=\"white\">\n              <Card.Header></Card.Header>\n              <Card.Body>\n                <Card.Title>Welcome to NYC Traffic Cams!</Card.Title>\n                <Card.Text>\n                  Nothing beats live cameras if you want to find out traffic conditions. That's why I've created a database of cameras distributing a live feed of the city's roadways.\n                  Each avenue is organized from uptown to downtown. I'm constantly adding cameras,please feel free to request new streets/avenues though the link above. Happy motoring in the Big Apple :)\n                </Card.Text>\n                <Spinner animation=\"grow\" variant=\"danger\" />\n              </Card.Body>\n              <Card.Footer className=\"text-muted\">The cameras are maintaned by NYC DOT and other NYC city agencies!</Card.Footer>\n          </Card>\n      </Container>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    cameras: state.cameras\n  }\n}\n\nconst mapDispatchToProps = dispatch => ({\n  removeCam: (url) => dispatch({ type: \"REMOVE_CAMERA\", url})\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(HomePage)\n","import React, { Component } from 'react';\nimport HeaderContainer from './HeaderContainer.js'\nimport CamerasContainer from './CamerasContainer.js'\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport RequestContainer from './RequestContainer.js'\nimport HomePage from './HomePage.js'\n\nclass App extends Component {\n\n  render() {\n    return (\n        <Router>\n            <HeaderContainer />\n            <Route path=\"/request\" component={RequestContainer} />\n            <Route path=\"/cameras\" component={CamerasContainer} />\n            <Route exact path='/' component={HomePage}/>\n        </Router>\n\n    );\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport ManageCameras from './ManageCameras.js'\n\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\n\nconst store = createStore(ManageCameras, applyMiddleware(thunk))\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","export default function ManageCameras(state = {\n  cameras: [], avenues: [],\n}, action) {\n   switch (action.type) {\n\n     case 'ADD_AVENUES':\n      return {\n        ...state,\n        avenues: action.avenues,\n        requestCreated: \"\"\n      }\n\n     case 'ADD_CAMERAS':\n     return {\n       ...state,\n       cameras: action.cameras,\n     }\n\n     case 'REMOVE_CAMERA':\n      const cams = state.cameras.filter(camera => camera.url !== action.url)\n      return {\n        ...state,\n        cameras: cams,\n      }\n\n      case 'REQUEST_SENT':\n        return {\n          ...state,\n          requestCreated: action.data,\n        }\n\n      case \"REQUEST_ALERT_SEEN\":\n        return {\n          ...state,\n          requestCreated: \"\"\n        }\n\n       case 'RESET':\n        return {\n          ...state,\n          cameras: [],\n          displayInputForm: false\n        }\n\n       default:\n        return state;\n   }\n};\n"],"sourceRoot":""}